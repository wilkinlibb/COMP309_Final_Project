# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y3MAUMoMCP7HAqSlnjQMQzxJD3f07qUA
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

import torch.optim as optim
from torch.utils.data import DataLoader, random_split, Subset
from torchvision import datasets, transforms
from torchvision import models

from sklearn.model_selection import KFold

from google.colab import drive
import os

import matplotlib.pyplot as plt
import numpy as np

import time

# defines the CNN model
class CNN(nn.Module):
    def __init__(self, num_classes=3):
        super(CNN, self).__init__()

        # using tbe ResNet-18 model as a feature extractor
        self.resnet = models.resnet18(pretrained=True)
        for param in self.resnet.parameters():
            param.requires_grad = False
        self.resnet.fc = nn.Identity()  # remove the classification layer

        # custom CNN layers
        self.conv1 = nn.Conv2d(3, 6, 5)      # 1st convolutional layer
        self.pool = nn.MaxPool2d(2, 2)       # max pooling layer
        self.conv2 = nn.Conv2d(6, 16, 5)     # 2nd convolutional layer

        # fully connected layers
        self.fc1 = nn.Linear(16 * 53 * 53 + 512, 1024)  # combined features (+ 512 from resnet)
        self.fc2 = nn.Linear(1024, 512)
        self.fc3 = nn.Linear(512, num_classes)

    # forward pass
    def forward(self, x):
        # ResNet branch
        resnet_features = self.resnet(x)  # (batch_size, 512)

        # custom CNN branch
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = torch.flatten(x, 1)  # flatten for fully connected layers

        # combine the ResNet and CNN features
        combined_features = torch.cat((resnet_features, x), dim=1)

        # fully connected layers
        x = F.relu(self.fc1(combined_features))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# training was done in Google co-lab so needed to mount drive to extract data
drive.mount('/content/drive', force_remount=True)
!unzip -q '/content/drive/MyDrive/comp309 data/train_data_clean_augmented.zip' -d '/content/'

data_dir = '/content/train_data_clean_augmented/'

# training parameters
device = "cuda" if torch.cuda.is_available() else "cpu"
batch_size = 32
learning_rate = 0.001
k_folds = 3
num_epochs = 3

# data preprocessing
transform = transforms.Compose([
    transforms.Resize((224, 224)),   # ResNet input size
    transforms.ToTensor(),
    transforms.Normalize(
        mean=[0.485, 0.456, 0.406],  # ImageNet mean
        std=[0.229, 0.224, 0.225]    # ImageNet std deviation
    )
])

# load dataset
train_data = datasets.ImageFolder(root=data_dir, transform=transform)
criterion = nn.CrossEntropyLoss()

# K-Fold Cross Validation
kfold = KFold(n_splits=3, shuffle=True)
fold = 1

# lists to store values as training model
all_train_losses, all_val_losses = [], []
all_train_accuracies, all_val_accuracies = [], []
epoch_times = []

for fold, (train_idx, val_idx) in enumerate(kfold.split(train_data)):
    print(f"Fold {fold+1}/{k_folds}")

    # prepare data loaders
    train_subsampler = Subset(train_data, train_idx)
    val_subsampler = Subset(train_data, val_idx)
    train_loader = DataLoader(train_subsampler, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(val_subsampler, batch_size=batch_size, shuffle=False)

    # reinitialize model and optimizer for each fold
    net = CNN().to(device)
    optimizer = optim.Adam(net.parameters(), lr=learning_rate)

    # lists to store values for specific fold
    train_losses, val_losses = [], []
    train_accuracies, val_accuracies = [], []
    fold_epoch_times = []

    for epoch in range(num_epochs):
        # start to time epoch
        start_time = time.time()

        # training loop
        net.train()
        running_loss, correct, total = 0.0, 0, 0
        for inputs, labels in train_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            # forward pass
            outputs = net(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

        # caclulate performance
        train_loss = running_loss / len(train_loader)
        train_accuracy = 100 * correct / total
        train_losses.append(train_loss)
        train_accuracies.append(train_accuracy)

        # validation phase
        net.eval()
        val_loss, correct, total = 0.0, 0, 0
        with torch.no_grad():
            for inputs, labels in val_loader:
                inputs, labels = inputs.to(device), labels.to(device)
                outputs = net(inputs)
                loss = criterion(outputs, labels)
                val_loss += loss.item()
                _, predicted = torch.max(outputs, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()

        # calculate performance
        val_loss /= len(val_loader)
        val_accuracy = 100 * correct / total
        val_losses.append(val_loss)
        val_accuracies.append(val_accuracy)

        # calculate the time for this epoch
        epoch_time = time.time() - start_time
        fold_epoch_times.append(epoch_time)

        print(f"Fold {fold + 1}, Epoch {epoch + 1}/{num_epochs} - "
              f"Train Loss: {train_loss:.4f}, Train Acc: {train_accuracy:.2f}% - "
              f"Val Loss: {val_loss:.4f}, Val Acc: {val_accuracy:.2f}% - "
              f"Epoch Time: {epoch_time:.2f}s")

    # store metrics for this fold
    all_train_losses.append(train_losses)
    all_val_losses.append(val_losses)
    all_train_accuracies.append(train_accuracies)
    all_val_accuracies.append(val_accuracies)
    epoch_times.append(fold_epoch_times)

# calculate average metrics across all folds
avg_train_losses = np.mean(all_train_losses, axis=0)
avg_val_losses = np.mean(all_val_losses, axis=0)
avg_train_accuracies = np.mean(all_train_accuracies, axis=0)
avg_val_accuracies = np.mean(all_val_accuracies, axis=0)

# calculate average epoch times
avg_epoch_times = np.mean(epoch_times, axis=0)

print("\nAverage metrics across folds:")
for epoch in range(num_epochs):
    print(f"Epoch {epoch+1}/{num_epochs} - "
          f"Avg Train Loss: {avg_train_losses[epoch]:.4f}, "
          f"Avg Train Acc: {avg_train_accuracies[epoch]:.2f}% - "
          f"Avg Val Loss: {avg_val_losses[epoch]:.4f}, "
          f"Avg Val Acc: {avg_val_accuracies[epoch]:.2f}% - "
          f"Avg Epoch Time: {avg_epoch_times[epoch]:.2f}s")

# saves the model
torch.save(net.state_dict(), 'model.pth')